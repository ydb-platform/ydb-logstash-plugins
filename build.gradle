import java.nio.file.Files
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING

apply plugin: 'java'
apply from: LOGSTASH_CORE_PATH + "/../rubyUtils.gradle"

group 'org.logstashplugins'
version = "1.0.2"
description = "Example Java output implementation"
pluginInfo.licenses = ['Apache-2.0']
pluginInfo.longDescription = "This gem is a Logstash plugin required to be installed on top of the Logstash core pipeline using \$LS_HOME/bin/logstash-plugin install gemname. This gem is not a stand-alone program"
pluginInfo.authors = ['Elasticsearch']
pluginInfo.email = ['info@elastic.co']
pluginInfo.homepage = "http://www.elastic.co/guide/en/logstash/current/index.html"

sourceCompatibility = 1.9
targetCompatibility = 1.9

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
    }
}

repositories {
    mavenCentral()
}

apply plugin: 'com.github.johnrengelman.shadow'

shadowJar {
    archiveClassifier = null
}

dependencies {
    implementation 'tech.ydb:ydb-sdk-topic:2.1.7'
    implementation 'tech.ydb.auth:yc-auth-provider:2.1.0'

    implementation 'org.apache.commons:commons-lang3:3.7'
    compileOnly 'org.apache.logging.log4j:log4j-api:2.17.0'
    compileOnly 'org.apache.logging.log4j:log4j-core:2.17.0'

    implementation 'org.apache.logging.log4j:log4j-api:2.17.0'
    implementation fileTree(dir: LOGSTASH_CORE_PATH, include: "**/logstash-core.jar")

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.jruby:jruby-complete:9.1.13.0'
    testImplementation 'org.apache.logging.log4j:log4j-core:2.9.1'
    testImplementation 'org.mockito:mockito-core:3.12.4'
}

clean {
    delete "${projectDir}/Gemfile"
    delete "${projectDir}/logstash-input-ydb_topics_input.gemspec"
    delete "${projectDir}/logstash-output-ydb_topics_output.gemspec"
    delete "${projectDir}/lib/"
    delete "${projectDir}/vendor/"
    delete "${projectDir}/.idea/"
    delete "${projectDir}/.build/"
    new FileNameFinder().getFileNames(projectDir.toString(), pluginInfo.pluginFullName() + "-?.?.?.gem").each { filename ->
        delete filename
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.register("vendor") {
    dependsOn shadowJar
    doLast {
        String vendorPathPrefix = "vendor/jar-dependencies"
        String projectGroupPath = project.group.replaceAll('\\.', '/')
        File projectJarFile = file("${vendorPathPrefix}/${projectGroupPath}/${pluginInfo.pluginFullName()}/${project.version}/${pluginInfo.pluginFullName()}-${project.version}.jar")
        projectJarFile.mkdirs()
        Files.copy(file("$buildDir/libs/${project.name}-${project.version}.jar").toPath(), projectJarFile.toPath(), REPLACE_EXISTING)
        validatePluginJar(projectJarFile, project.group)
    }
}

tasks.register("generateRubySupportFiles") {
    doLast {
        generateRubySupportFilesForPlugin(project.description, project.group, version)
    }
}

tasks.register("removeObsoleteJars") {
    doLast {
        new FileNameFinder().getFileNames(
                projectDir.toString(),
                "vendor/**/" + pluginInfo.pluginFullName() + "*.jar",
                "vendor/**/" + pluginInfo.pluginFullName() + "-" + version + ".jar").each { f ->
            delete f
        }
    }
}

def currentDir = System.getProperty('user.dir')

if (currentDir.endsWith('\\ydb_input_plugin')) {
    tasks.register('gem', Exec) {
        dependsOn ':ydb_input_plugin:gemInput'
        commandLine 'ruby', '-S', 'gem', 'build', "${projectDir}/ydb_input_plugin/${pluginInfo.pluginFullName()}.gemspec"
    }
} else if (currentDir.endsWith('\\ydb_output_plugin')) {
    tasks.register('gem', Exec) {
        dependsOn ':ydb_output_plugin:gemOutput'
        commandLine 'ruby', '-S', 'gem', 'build', "${projectDir}/ydb_output_plugin/${pluginInfo.pluginFullName()}.gemspec"
    }
} else {
    // Если запуск из корневой директории, выполнить обе задачи
    tasks.register('gem', GradleBuild) {
        dependsOn ':ydb_input_plugin:gemInput', ':ydb_output_plugin:gemOutput'
    }
}


