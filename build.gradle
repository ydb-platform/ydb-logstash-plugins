description = 'YDB LogStash plugins'

allprojects {
    println "apply allprojects ${name} in ${projectDir}"
    group = 'org.logstashplugins'
    version = '1.0.2'
}

buildscript {
    println "apply buildscript ${name} in ${projectDir}"

    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "gradle.plugin.com.github.johnrengelman:shadow:7.1.2"
    }
}

subprojects {
    println "apply subproject ${name} in ${projectDir}"

    apply plugin: 'java'
    apply from: LOGSTASH_CORE_PATH + '/../rubyUtils.gradle'
    apply plugin: 'com.github.johnrengelman.shadow'

    // ===========================================================================
    // plugin info
    // ===========================================================================
    pluginInfo.licenses        = ['Apache-2.0'] // list of SPDX license IDs
    pluginInfo.longDescription = "This gem is a Logstash plugin required to be installed on top of the Logstash core pipeline using \$LS_HOME/bin/logstash-plugin install gemname. This gem is not a stand-alone program"
    pluginInfo.authors         = ['Elasticsearch']
    pluginInfo.email           = ['info@elastic.co']
    pluginInfo.homepage        = "http://www.elastic.co/guide/en/logstash/current/index.html"
    // ===========================================================================

    sourceCompatibility = 1.9
    targetCompatibility = 1.9

    repositories {
        mavenCentral()
    }

    shadowJar {
        archiveClassifier = null
    }

    dependencies {
        implementation 'tech.ydb:ydb-sdk-topic:2.1.7'
        implementation 'tech.ydb.auth:yc-auth-provider:2.1.0'

        implementation 'tech.ydb.test:ydb-junit4-support:2.1.10'
        implementation 'tech.ydb.test:ydb-junit5-support:2.1.10'

        implementation 'tech.ydb:ydb-sdk-table:2.1.10'

        implementation 'org.apache.commons:commons-lang3:3.7'
        compileOnly 'org.apache.logging.log4j:log4j-api:2.17.0'
        compileOnly 'org.apache.logging.log4j:log4j-core:2.17.0'

        implementation 'org.apache.logging.log4j:log4j-api:2.17.0'
        implementation fileTree(dir: LOGSTASH_CORE_PATH, include: "**/logstash-core.jar")

        testImplementation 'org.junit.jupiter:junit-jupiter:5.6.0'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'


        testImplementation 'org.jruby:jruby-complete:9.1.13.0'
        testImplementation 'org.apache.logging.log4j:log4j-core:2.9.1'
        testImplementation 'org.mockito:mockito-core:3.12.4'
    }

    clean {
        delete "${projectDir}/Gemfile"
        delete "${projectDir}/lib/"
        delete "${projectDir}/vendor/"
        fileTree(dir: projectDir, includes: ["*.gemspec"]).each { file ->
            file.delete()
        }
        delete "${projectDir}/VERSION"
        new FileNameFinder().getFileNames(projectDir.toString(), pluginInfo.pluginFullName() + "-?.?.?.gem").each { filename ->
            delete filename
        }
    }
    //after clean if get problems: TASKKILL /F /IM java.exe

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    tasks.register("vendor"){
        dependsOn shadowJar
        doLast {
            String vendorPathPrefix = "vendor/jar-dependencies"
            String projectGroupPath = project.group.replaceAll('\\.', '/')
            File projectJarFile = file("${vendorPathPrefix}/${projectGroupPath}/${pluginInfo.pluginFullName()}/${project.version}/${pluginInfo.pluginFullName()}-${project.version}.jar")
            projectJarFile.mkdirs()
            java.nio.file.Files.copy(
                file("$buildDir/libs/${project.name}-${project.version}.jar").toPath(),
                projectJarFile.toPath(),
                java.nio.file.StandardCopyOption.REPLACE_EXISTING
            )
            validatePluginJar(projectJarFile, project.group)
        }
    }

    tasks.register("generateRubySupportFiles") {
        doLast {
            generateRubySupportFilesForPlugin(project.description, project.group, version)
        }
    }

    tasks.register("removeObsoleteJars") {
        doLast {
            new FileNameFinder().getFileNames(
                    projectDir.toString(),
                    "vendor/**/" + pluginInfo.pluginFullName() + "*.jar",
                    "vendor/**/" + pluginInfo.pluginFullName() + "-" + version + ".jar").each { f ->
                delete f
            }
        }
    }

    tasks.register("createVersionFile") {
        doLast {
            def versionFile = file("${projectDir}/VERSION")
            versionFile.text = version
        }
    }


    tasks.register("gem") {
        dependsOn = [createVersionFile, downloadAndInstallJRuby, removeObsoleteJars, vendor, generateRubySupportFiles]
        doLast {
            buildGem(projectDir, buildDir, pluginInfo.pluginFullName() + ".gemspec")
        }
    }
}
